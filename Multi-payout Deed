pragma solidity ^0.5.0;

contract DeedMultiPayout {
  address public lawyer;
  address payable public beneficiary;
  uint public earliest; // Earliest time for first payout
  uint public amount;
  uint constant public PAYOUTS = 10; // Amount of payouts
  uint constant public INTERVAL = 10; // Duration in seconds per payout
  uint public paidPayouts;
  
  constructor(
    address _lawyer,
    address payable _beneficiary,
    uint fromNow)
    payable
    public {
        lawyer = _lawyer;
        beneficiary = _beneficiary;
        earliest = now + fromNow;
        amount = msg.value / PAYOUTS;
    }
  
  function withdraw() public {
    require(msg.sender == beneficiary, 'You are not the beneficiary!');
    require(now >= earliest, 'Too early for a payout!');
    require(paidPayouts < PAYOUTS, 'No payouts left :(' );
    
    uint elligiblePayouts = (now - earliest) / INTERVAL; 
    // Ex: 40s (Now) - 10s (Earliest) = 30s / 10s (Interval) = 3 elligiblePayouts
    
    uint duePayouts = elligiblePayouts - paidPayouts; 
    // Ex cont: 3 elligiblePayouts - 1 paidPayouts = 2 duePayouts
    
    duePayouts = duePayouts + paidPayouts > PAYOUTS ? PAYOUTS - paidPayouts : duePayouts;
    // If duePayouts + paidPayouts exceeds 10 total PAYOUTS, then 10 total PAYOUTS - paidPayouts = duePayouts
    // Else revert to duePayouts
    
    paidPayouts += duePayouts;
    // paidPayouts = paidPayouts + duePayouts
    
    beneficiary.transfer(duePayouts * amount);
  }
}
